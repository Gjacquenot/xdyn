sudo: false
dist: trusty

language: c++

git:
  submodules: false

services:
  - docker

env:
  global:
  - DOCKER_USERNAME=charlesedouardcady
  - secure: "NsDSu4SvdqoWVGjSySY8RzUSZq3HUcx7EhJrycgqoOXcFHoGxL3eejthqQGdjgJEuwnQrCDAIPr3pBBWqS9Yb/LWMx62Rhjpsdc+P/1raytZY35zn9gBhW7/6O6kgkKqEbVs3q6ILsU1WTgpn4lDHkVxz/u5KnEu5O2yyP9s0zLTEsooXx4/Q3RQfKZ1FWDtdQYLlnsHn7WsIRhUldFYu2sucBSs72LgSUsZ/A8nrD6LsqT6rpFSpIFofPiXntCDjnD9W4vzBtxUa7Dd8gT3iG4Btnp4CtJ9wfAnYr+sWLR46AB4TZ1u3qlUKh9YorL+HzHV1h/1aMbTUpOiEB7Prdxb7yx08mvIlvgisELdpFGLj3KoKzOS5zOZgRuPnoFi4ukKPZpIsFcXceFuksyVVpZ3yJHJNDWLR+oE1cRh1shc1l5/ljaaeIIdoO+Si41PygFC8xn7hHQyjDMHKH1E8RKF55d0lDAvHvQi0bRMycsSz3ik2zYez5CZOzsvwzBW2vJXPgCUSPjq5BGlOcwerT9yfivZVhZR3RF6MLaeQx+vZZURQn+fNCgY1f4EySfmzn26vFtgHMPcdSwVmOiewhcmKmYE3QMmoBxAUAbK2IwgjcSh3szQFLOQ1SOGxI1hLn8uFYZvNFUIFs0hTXfJyw5pmnSe2bzcQLxtE5llUSc="

matrix:
  include:
    - name: "Debian 8 release GCC 492"
      env:
        - BUILD_TYPE=Release
        - BUILD_DIR=build_deb8
        - CPACK_GENERATOR=DEB
        - DOCKER_IMAGE=sirehna/base-image-debian8-gcc492-xdyn
        - BOOST_ROOT=/opt/boost
        - SSC_ROOT=/opt/ssc
        - HDF5_DIR=/usr/local/hdf5/share/cmake
        - BUILD_DOCUMENTATION=False
    - name: "Debian 9 release GCC 6"
      env:
        - BUILD_TYPE=Release
        - BUILD_DIR=build_deb9
        - CPACK_GENERATOR=DEB
        - DOCKER_IMAGE=sirehna/base-image-debian9-gcc6-xdyn
        - BOOST_ROOT=/opt/boost
        - SSC_ROOT=/opt/ssc
        - HDF5_DIR=/usr/local/hdf5/share/cmake
        - BUILD_DOCUMENTATION=True
    - name: "Debian 9 coverage GCC 6"
      env:
        - BUILD_TYPE=Coverage
        - BUILD_DIR=build_deb9
        - CPACK_GENERATOR=DEB
        - DOCKER_IMAGE=sirehna/base-image-debian9-gcc6-xdyn
        - BOOST_ROOT=/opt/boost
        - SSC_ROOT=/opt/ssc
        - HDF5_DIR=/usr/local/hdf5/share/cmake
        - BUILD_DOCUMENTATION=False
    - name: "Debian 9 release GCC 820"
      env:
        - BUILD_TYPE=Release
        - BUILD_DIR=build_deb9_gcc820
        - CPACK_GENERATOR=DEB
        - DOCKER_IMAGE=sirehna/base-image-debian9-gcc820-xdyn
        - BOOST_ROOT=/opt/boost
        - SSC_ROOT=/opt/ssc
        - HDF5_DIR=/usr/local/hdf5/share/cmake
        - BUILD_DOCUMENTATION=True
    - name: "Windows cross compilation Gcc 5.4.0 release"
      env:
        - BUILD_TYPE=Release
        - BUILD_DIR=build_win
        - CPACK_GENERATOR=ZIP
        - DOCKER_IMAGE=sirehna/base-image-win64-gcc540-win32threads-ssc-xdyn
        - BOOST_ROOT=/usr/src/mxe/usr/x86_64-w64-mingw32.static
        - SSC_ROOT=/opt/ssc
        - HDF5_DIR=/opt/HDF5_1_8_20/cmake
        - BUILD_DOCUMENTATION=False
        - BUILD_DOCUMENTATION=False

before_install:
  - docker pull $DOCKER_IMAGE || true

script:
  - if [[ $BUILD_TYPE == "Coverage" ]];
    then
    ci_env=`bash <(curl -s https://codecov.io/env)`;
    else
    ci_env=;
    fi
  - docker run $ci_env --rm -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/opt/share -w /opt/share $DOCKER_IMAGE /bin/bash -c \
       "ls"
  - docker run $ci_env --rm -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/opt/share -w /opt/share $DOCKER_IMAGE /bin/bash -c \
       "rm -rf /opt/share/code/yaml-cpp &&
        cp -rf /opt/yaml_cpp /opt/share/code/yaml-cpp &&
        cp /opt/share/yaml-cpp-CMakeLists.txt /opt/share/code/yaml-cpp/CMakeLists.txt &&
        rm -rf /opt/share/code/eigen3-hdf5 &&
        cp -rf /opt/eigen3-hdf5 /opt/share/code/eigen3-hdf5 &&
        rm -rf /opt/share/code/google-test &&
        cp -rf /opt/googletest /opt/share/code/google-test &&
        rm -rf /opt/share/code/eigen &&
        cp -rf /opt/eigen /opt/share/code/eigen &&
        cd /opt/share/code &&
        mkdir -p $BUILD_DIR &&
        cd $BUILD_DIR &&
        if [[ $BUILD_DIR == build_win ]];
        then
        mkdir /opt/share/.wine;
        export WINEPREFIX=/opt/share/.wine;
        wine winecfg;
        fi &&
        if [[ $BUILD_DIR == build_win ]];
        then
        cmake -Wno-dev
          -G Ninja
          -DBUILD_DOCUMENTATION:BOOL=$BUILD_DOCUMENTATION
          -DCPACK_GENERATOR=$CPACK_GENERATOR
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DCMAKE_INSTALL_PREFIX:PATH=/opt/xdyn
          -DSSC_ROOT=$SSC_ROOT
          -DHDF5_DIR=$HDF5_DIR
          -DBoost_DEBUG=0
          -DBOOST_ROOT:PATH=$BOOST_ROOT
          -DBOOST_INCLUDEDIR:PATH=$BOOST_ROOT/include
          -DBoost_INCLUDE_DIR:PATH=$BOOST_ROOT/include
          -DBOOST_LIBRARYDIR:PATH=$BOOST_ROOT/lib
          -DBoost_NO_SYSTEM_PATHS:BOOL=OFF
          -DBoost_LIBRARY_DIR_RELEASE:PATH=$BOOST_ROOT/lib
          -DBoost_PROGRAM_OPTIONS_LIBRARY:PATH=$BOOST_ROOT/lib/libboost_program_options-mt.a
          -DBoost_FILESYSTEM_LIBRARY:PATH=$BOOST_ROOT/lib/libboost_filesystem-mt.a
          -DBoost_SYSTEM_LIBRARY:PATH=$BOOST_ROOT/lib/libboost_system-mt.a
          -DBoost_REGEX_LIBRARY:PATH=$BOOST_ROOT/lib/libboost_regex-mt.a
          -Dcppzmq_DIR=/opt/libzmq/share/cmake/cppzmq
          -DZeroMQ_DIR=/opt/libzmq/share/cmake/ZeroMQ
          -DProtobuf_USE_STATIC_LIBS:BOOL=True
          -DProtobuf_INCLUDE_DIR=/opt/protobuf/include
          -DProtobuf_LIBRARY=/opt/protobuf/lib/libprotobuf.a
          -DProtobuf_PROTOC_EXECUTABLE:PATH=/usr/bin/protoc
          -DCMAKE_SYSTEM_VERSION=7
          /opt/share/code;
        else
        cmake -Wno-dev
          -G Ninja
          -DBUILD_DOCUMENTATION:BOOL=$BUILD_DOCUMENTATION
          -DCPACK_GENERATOR=$CPACK_GENERATOR
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          -DCMAKE_INSTALL_PREFIX:PATH=/opt/xdyn
          -DSSC_ROOT=$SSC_ROOT
          -DHDF5_DIR=$HDF5_DIR
          -DBOOST_ROOT:PATH=$BOOST_ROOT
          -DBOOST_INCLUDEDIR:PATH=$BOOST_ROOT/include
          -DBoost_INCLUDE_DIR:PATH=$BOOST_ROOT/include
          -DBOOST_LIBRARYDIR:PATH=$BOOST_ROOT/lib
          -DBoost_NO_SYSTEM_PATHS:BOOL=OFF
          -DBoost_LIBRARY_DIR_RELEASE:PATH=$BOOST_ROOT/lib
          /opt/share/code;
        fi &&
        ninja package &&
        ls &&
        if [[ $BUILD_DIR == build_win ]];
        then
        wine ./run_all_tests --gtest_filter=-WebSocketObserverTest*:HOSTest*;
        else
        ./run_all_tests --gtest_filter=-HOSTest*;
        fi &&
        if [[ $BUILD_TYPE == Coverage ]];
        then
        echo Coverage;
        gprof run_all_tests gmon.out > gprof_res.txt 2> gprof_res.err;
        bash <(curl -s https://codecov.io/bash);
        fi"

after_success:
- |
    echo "TRAVIS_BRANCH  $TRAVIS_BRANCH"
    echo "TRAVIS_TAG     $TRAVIS_TAG"
    echo "BUILD_TYPE     $BUILD_TYPE"
    echo "BUILD_DIR      $BUILD_DIR"
- if [ "$TRAVIS_TAG" ] && [ "$BUILD_TYPE" == "Release" ] && [ "$BUILD_DIR" == "build_deb9" ];
  then
  echo "Pushing xdyn docker image to dockerhub";
  cp code/$BUILD_DIR/xdyn.deb ci/xdyn_deb/.;
  cd ci;
  cd xdyn_deb;
  docker build --tag sirehna/xdyn -f Dockerfile .;
  docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD;
  docker push sirehna/xdyn;
  cd ..;
  cd ..;
  fi
- if [ "$TRAVIS_TAG" ] && [ "$BUILD_TYPE" == "Release" ] && [ "$BUILD_DIR" == "build_deb8" ];
  then
  echo "Fetching generated deb";
  ls -altr code/$BUILD_DIR/xdyn.deb;
  shasum -a256 code/$BUILD_DIR/xdyn.deb;
  cp code/$BUILD_DIR/xdyn.deb xdyn_binary_debian9_amd64.deb;
  fi
- if [ "$TRAVIS_TAG" ] && [ "$BUILD_TYPE" == "Release" ] && [ "$BUILD_DIR" == "build_deb9" ];
  then
  echo "Fetching generated deb";
  ls -altr code/$BUILD_DIR/xdyn.deb;
  shasum -a256 code/$BUILD_DIR/xdyn.deb;
  cp code/$BUILD_DIR/xdyn.deb xdyn_binary_debian9_amd64.deb;
  /opt/share/code/build_deb9/xdyn.deb
  fi
- if [ "$TRAVIS_TAG" ] && [ "$BUILD_TYPE" == "Release" ] && [ "$BUILD_DIR" == "build_win" ];
  then
  echo "Fetching generated zip";
  ls -altr code/build_win/xdyn.zip;
  shasum -a256 code/build_win/xdyn.zip;
  cd code/build_win/xdyn.zip xdyn_binary_windows_64.zip;
  fi

# travis setup releases
# https://docs.travis-ci.com/user/deployment
# https://docs.travis-ci.com/user/deployment#conditional-releases-with-on
before_deploy:
- ls -altr xdyn_binary_*;
# - ls -altr xdyn_binary_debian8_amd64.deb;
# - ls -altr xdyn_binary_windows_64.zip;
deploy:
  provider: releases
  api_key:
    secure: LIR/zJafApdZ/cAjZ92rLKQ6oculifEb2+FJXxGeU4L8AK6LVcw6EVn5Q9GjGQvjMNFf0Iqw/Ca7noFGjqPp2WdGzz8ghgkW9dSFnKGf9QztkNS+2h5Jm3SN3wCj/aAzvVdF/8zToaRoNj0TaZWjJ5WtFbfQNzoyqrJvYZ+Uz3O+WdxpHsMIKocWm/nSMxwHHnzDaY1BNZ+MShl7x8kJUBatszv9yxi2JDBNUABidwLyyJb6OeC6lJBpd9yog3Vm613Z3wz6Q6ffds3tqpdJfL5aDm0JTn2T3NF7FSYrQ/oZ7DJkMiZFa/e9wyAxDJ1V7skFByyJvAgnKKvXZydN/nvwNaXuQ15VqjZUoD4u+b/3ROhITH8sDOxdloZMCUfqQRkxPaveWeVn0Y+9k+N2psE4amFqRLT3NaK9c5zAPIsZ8HRwZNkfeIWT/FpuM9efGpmD5Xzpm11nCnOVgWu5v+8MDcY19ACui8IoMUVUXpSieWCb/VU5hNd2XD9Cyqh9SLKIjzgluVG7X/EeIDOA8SnQ0/+YaOp+j919JnVLy4sN/ZA2b4BARbBnptkTyvMotekImPDVbuL7fr7Q41cf0NkfZJHfpHy8feBLD9B8/uOEy2IdVsItI9NhO7UeMCet1GeBumq2C1iYmyfrE5TJfJsNv9N4O/QX3theT0ycG3w=
  skip_cleanup: true
  file_glob: true
  file:
    - xdyn_binary_*
  #file:
  #  - xdyn_binary_debian8_amd64.deb
  #  - xdyn_binary_windows_64.zip
  on:
    tags: true
    repo: sirehna/xdyn
    branch: master
    condition: $BUILD_TYPE = Release
