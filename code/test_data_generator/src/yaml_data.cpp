/*
 * yaml_data.cpp
 *
 *  Created on: 16 avr. 2014
 *      Author: cady
 */

#include "yaml_data.hpp"
#include <sstream>

std::string test_data::bug_2655()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: waves\n"
       << "    discretization:\n"
       << "       n: 10\n"
       << "       omega min: {value: 0.1, unit: rad/s}\n"
       << "       omega max: {value: 6, unit: rad/s}\n"
       << "       energy fraction: 0.999\n"
       << "    spectra:\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 0\n"
       << "        directional spreading:\n"
       << "           type: dirac\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: dirac\n"
       << "           omega0: {value: 0.8976, unit: rad/s}\n"
       << "           Hs: {value: 5, unit: m}\n"
       << "    output:\n"
       << "        frame of reference: NED\n"
       << "        mesh:\n"
       << "            xmin: {value: 1, unit: m}\n"
       << "            xmax: {value: 5, unit: m}\n"
       << "            nx: 0\n"
       << "            ymin: {value: 1, unit: m}\n"
       << "            ymax: {value: 2, unit: m}\n"
       << "            ny: 0\n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -0.099, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.334, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: non-linear Froude-Krylov\n"
       << "      - model: linear damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 2: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 3: [ 0, 0, 1.9e5,      0,      0, 0]\n"
       << "            row 4: [ 0, 0,     0, 1.74e4,      0, 0]\n"
       << "            row 5: [ 0, 0,     0,      0, 4.67e6, 0]\n"
       << "            row 6: [ 0, 0,     0,      0,      0, 0]\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 2: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 3: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 4: [ 0, 0, 0, 1.45e6, 0, 0]\n"
       << "            row 5: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 6: [ 0, 0, 0,      0, 0, 0]\n"
       << "\n"
       << "output:\n"
       << "   - format: csv\n"
       << "     filename: houle_travers_5m_7s.csv\n"
       << "     data: [t, x(Anthineas), y(Anthineas), z(Anthineas), u(Anthineas), v(Anthineas), w(Anthineas), p(Anthineas), q(Anthineas), r(Anthineas), phi(Anthineas), theta(Anthineas), psi(Anthineas)]\n";
    return ss.str();
}

std::string test_data::hydrostatic_test()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1000, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    frame: NED\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: body 1\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 10, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: body\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: body 1\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: body 1\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: body 1\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "\n";
    return ss.str();
}

std::string test_data::added_mass_from_file()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1000, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    frame: NED\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: body 1\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 10, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: body\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: body 1\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: body 1\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            from hdb file: anthineas.hdb\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "\n";
    return ss.str();
}

std::string test_data::full_example()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1000, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 12, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: body 1\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 10, unit: m}\n"
       << "        y: {value: 21, unit: cm}\n"
       << "        z: {value: 33, unit: km}\n"
       << "        phi: {value: 1, unit: rad}\n"
       << "        theta: {value: 3, unit: rad}\n"
       << "        psi: {value: 2, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 4, unit: m}\n"
       << "        y: {value: 8, unit: m}\n"
       << "        z: {value: 12, unit: m}\n"
       << "        phi: {value: 1.3, unit: rad}\n"
       << "        theta: {value: 1.4, unit: rad}\n"
       << "        psi: {value: 1.5, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: body 1\n"
       << "        u: {value: -8, unit: m/s}\n"
       << "        v: {value: -9, unit: m/s}\n"
       << "        w: {value: 14, unit: m/s}\n"
       << "        p: {value: 56, unit: rad/s}\n"
       << "        q: {value: 7, unit: rad/s}\n"
       << "        r: {value: 6, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: body 1\n"
       << "            x: {value: 4, unit: m}\n"
       << "            y: {value: 7, unit: m}\n"
       << "            z: {value: -10, unit: m}\n"
       << "        mass: {value: 1000, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: body 1\n"
       << "            row 1: [1,2,3,4,5,6]\n"
       << "            row 2: [7,2,1,2,11,13]\n"
       << "            row 3: [20,30,3,80,0.9,0.1]\n"
       << "            row 4: [0,0,0,4,0,0]\n"
       << "            row 5: [0,0,0,0,5,0]\n"
       << "            row 6: [0,0,0,0,0,6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: body 1\n"
       << "            row 1: [1,2,3,4,5,6]\n"
       << "            row 2: [-7,2,1,2,11,13]\n"
       << "            row 3: [-20,30,3,80,0.9,0.1]\n"
       << "            row 4: [0,0,0,4.1,0,0]\n"
       << "            row 5: [0,0,0,0,5.2,0]\n"
       << "            row 6: [0,0,0,0,0,6.3]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: body 1\n"
       << "            row 1: [  2,   3,   5,   7,  11,  13]\n"
       << "            row 2: [ 17,  19,  23,  29,  31,  37]\n"
       << "            row 3: [ 41,  43,  47,  53,  59,  61]\n"
       << "            row 4: [ 67,  71,  73,  79,  83,  89]\n"
       << "            row 5: [ 97, 101, 103, 107, 109, 113]\n"
       << "            row 6: [127, 131, 137, 139, 149, 151]\n"
       << "    blocked dof:\n"
       << "       from YAML:\n"
       << "         - state: u\n"
       << "           t: [0,4.2]\n"
       << "           value: [4,5]\n"
       << "           interpolation: linear\n"
       << "output:\n"
       << "   - format: csv\n"
       << "     filename: tutorial_1.csv\n"
       << "     data: [x(body 1)]\n"
       << "   - format: hdf5\n"
       << "     filename: tutorial_1.h5\n"
       << "     data: ['y(body 1)','z(body 1)','Fz(gravity,body 1,body 1)','waves']\n";
    return ss.str();
}

std::string test_data::full_example_with_propulsion()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1000, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 12, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: body 1\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 10, unit: m}\n"
       << "        y: {value: 21, unit: cm}\n"
       << "        z: {value: 33, unit: km}\n"
       << "        phi: {value: 1, unit: rad}\n"
       << "        theta: {value: 3, unit: rad}\n"
       << "        psi: {value: 2, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 4, unit: m}\n"
       << "        y: {value: 8, unit: m}\n"
       << "        z: {value: 12, unit: m}\n"
       << "        phi: {value: 1.3, unit: rad}\n"
       << "        theta: {value: 1.4, unit: rad}\n"
       << "        psi: {value: 1.5, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: body 1\n"
       << "        u: {value: -8, unit: m/s}\n"
       << "        v: {value: -9, unit: m/s}\n"
       << "        w: {value: 14, unit: m/s}\n"
       << "        p: {value: 56, unit: rad/s}\n"
       << "        q: {value: 7, unit: rad/s}\n"
       << "        r: {value: 6, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: body 1\n"
       << "            x: {value: 4, unit: m}\n"
       << "            y: {value: 7, unit: m}\n"
       << "            z: {value: -10, unit: m}\n"
       << "        mass: {value: 1000, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: body 1\n"
       << "            row 1: [1,2,3,4,5,6]\n"
       << "            row 2: [7,2,1,2,11,13]\n"
       << "            row 3: [20,30,3,80,0.9,0.1]\n"
       << "            row 4: [0,0,0,4,0,0]\n"
       << "            row 5: [0,0,0,0,5,0]\n"
       << "            row 6: [0,0,0,0,0,6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: body 1\n"
       << "            row 1: [1,2,3,4,5,6]\n"
       << "            row 2: [-7,2,1,2,11,13]\n"
       << "            row 3: [-20,30,3,80,0.9,0.1]\n"
       << "            row 4: [0,0,0,4.1,0,0]\n"
       << "            row 5: [0,0,0,0,5.2,0]\n"
       << "            row 6: [0,0,0,0,0,6.3]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: body 1\n"
       << "            row 1: [  2,   3,   5,   7,  11,  13]\n"
       << "            row 2: [ 17,  19,  23,  29,  31,  37]\n"
       << "            row 3: [ 41,  43,  47,  53,  59,  61]\n"
       << "            row 4: [ 67,  71,  73,  79,  83,  89]\n"
       << "            row 5: [ 97, 101, 103, 107, 109, 113]\n"
       << "            row 6: [127, 131, 137, 139, 149, 151]\n"
       << "    controlled forces:\n"
       << "      - name: port side propeller\n"
       << "        model: wageningen B-series\n"
       << "        position of propeller frame:\n"
       << "            frame: mesh(body 1)\n"
       << "            x: {value: -4, unit: m}\n"
       << "            y: {value: -2, unit: m}\n"
       << "            z: {value: 2, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: -10, unit: deg}\n"
       << "            psi: {value: -1, unit: deg}\n"
       << "        wake coefficient w: 0.9\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0.7\n"
       << "        rotation: clockwise\n"
       << "        number of blades: 3\n"
       << "        blade area ratio AE/A0: 0.5\n"
       << "        diameter: {value: 2, unit: m}\n"
       << "      - name: starboard propeller\n"
       << "        model: wageningen B-series\n"
       << "        position of propeller frame:\n"
       << "            frame: mesh(body 1)\n"
       << "            relative to: mesh(body 1)\n"
       << "            x: {value: -4, unit: m}\n"
       << "            y: {value: 2, unit: m}\n"
       << "            z: {value: 2, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: -10, unit: deg}\n"
       << "            psi: {value: 1, unit: deg}\n"
       << "        wake coefficient w: 0.9\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0.7\n"
       << "        rotation: anti-clockwise\n"
       << "        number of blades: 3\n"
       << "        blade area ratio AE/A0: 0.5\n"
       << "        diameter: {value: 2, unit: m}\n";
    return ss.str();
}

std::string test_data::falling_ball_example()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1000, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models: []\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: ball\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -10, unit: m}\n"
       << "        phi: {value: 1, unit: rad}\n"
       << "        theta: {value: 3, unit: rad}\n"
       << "        psi: {value: 2, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 4, unit: m}\n"
       << "        y: {value: 8, unit: m}\n"
       << "        z: {value: 12, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: ball\n"
       << "        u: {value: 1, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: ball\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.5, unit: m}\n"
       << "        mass: {value: 1000, unit: tonne}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: ball\n"
       << "            row 1: [1E6,0,0,0,0,0]\n"
       << "            row 2: [0,1E6,0,0,0,0]\n"
       << "            row 3: [0,0,1E6,0,0,0]\n"
       << "            row 4: [0,0,0,1E6,0,0]\n"
       << "            row 5: [0,0,0,0,1E6,0]\n"
       << "            row 6: [0,0,0,0,0,1E6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: ball\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "        g: {value: 9.81, unit: m/s^2}\n"
       << "output:\n"
       << "   - format: csv\n"
       << "     filename: falling_ball.csv\n"
       << "     data: [x(ball)]\n"
       << "   - format: hdf5\n"
       << "     filename: falling_ball.h5\n"
       << "     data: ['x(ball)','y(ball)','z(ball)','Fz(gravity,ball,ball)']\n"
       << "   - format: json\n"
       << "     filename: falling_ball.json\n"
       << "     data: ['x(ball)','y(ball)','z(ball)','qr(ball)','qi(ball)','qj(ball)','qk(ball)']\n";
    return ss.str();
}

std::string test_data::falling_cube()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1026, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models: []\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: cube\n"
       << "    mesh: cube.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.5, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value:  0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: cube\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: cube\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.5, unit: m}\n"
       << "        mass: {value: 1, unit: tonne}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [1E3,0,0,0,0,0]\n"
       << "            row 2: [0,1E3,0,0,0,0]\n"
       << "            row 3: [0,0,1E3,0,0,0]\n"
       << "            row 4: [0,0,0,1E3,0,0]\n"
       << "            row 5: [0,0,0,0,1E3,0]\n"
       << "            row 6: [0,0,0,0,0,1E3]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n";
    return ss.str();
}

std::string test_data::rolling_cube()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1026, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: cube\n"
       << "    mesh: cube.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.5, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value:  0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 10, unit: deg}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: cube\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: cube\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.5, unit: m}\n"
       << "        mass: {value: 1, unit: tonne}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [1E3,0,0,0,0,0]\n"
       << "            row 2: [0,1E3,0,0,0,0]\n"
       << "            row 3: [0,0,1E3,0,0,0]\n"
       << "            row 4: [0,0,0,1E3,0,0]\n"
       << "            row 5: [0,0,0,0,1E3,0]\n"
       << "            row 6: [0,0,0,0,0,1E3]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n";
    return ss.str();
}

std::string test_data::oscillating_cube_example()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1026, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: cube\n"
       << "    mesh: cube.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.5, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value:  0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.5, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: cube\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: cube\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0, unit: m}\n"
       << "        mass: {value: 1, unit: tonne}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [1E3,0,0,0,0,0]\n"
       << "            row 2: [0,1E3,0,0,0,0]\n"
       << "            row 3: [0,0,1E3,0,0,0]\n"
       << "            row 4: [0,0,0,1E3,0,0]\n"
       << "            row 5: [0,0,0,0,1E3,0]\n"
       << "            row 6: [0,0,0,0,0,1E3]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n";
    return ss.str();
}

std::string test_data::new_oscillating_cube_example()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1000, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: cube\n"
       << "    mesh: big_cube.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.5, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value:  0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0, unit: m}\n"
       << "        phi: {value: 25, unit: deg}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: cube\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: cube\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0, unit: m}\n"
       << "        mass: {value: 0.5, unit: tonne}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [1E3,0,0,0,0,0]\n"
       << "            row 2: [0,1E3,0,0,0,0]\n"
       << "            row 3: [0,0,1E3,0,0,0]\n"
       << "            row 4: [0,0,0,1E3,0,0]\n"
       << "            row 5: [0,0,0,0,1E3,0]\n"
       << "            row 6: [0,0,0,0,0,1E3]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: hydrostatic\n";
    return ss.str();
}


std::string test_data::stable_cube_example()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1026, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: cube\n"
       << "    mesh: cube.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.5, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value:  0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.4746588693957115, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: cube\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: cube\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0, unit: m}\n"
       << "        mass: {value: 1, unit: tonne}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [1E3,0,0,0,0,0]\n"
       << "            row 2: [0,1E3,0,0,0,0]\n"
       << "            row 3: [0,0,1E3,0,0,0]\n"
       << "            row 4: [0,0,0,1E3,0,0]\n"
       << "            row 5: [0,0,0,0,1E3,0]\n"
       << "            row 6: [0,0,0,0,0,1E3]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n";
    return ss.str();
}

std::string test_data::stable_rolling_cube_test()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1000, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    output:\n"
       << "        frame of reference: cube\n"
       << "        mesh:\n"
       << "            xmin: {value: -10, unit: m}\n"
       << "            xmax: {value: 1, unit: km}\n"
       << "            nx: 10\n"
       << "            ymin: {value: -20, unit: m}\n"
       << "            ymax: {value: 3, unit: km}\n"
       << "            ny: 20\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: cube\n"
       << "    mesh: cube.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.5, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value:  0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.25, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: 2, unit: deg}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: cube\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: deg/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: cube\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.4, unit: m}\n"
       << "        mass: {value: 750, unit: kg}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [83.33,0,0,0,0,0]\n"
       << "            row 2: [0,83.33,0,0,0,0]\n"
       << "            row 3: [0,0,83.33,0,0,0]\n"
       << "            row 4: [0,0,0,83.33,0,0]\n"
       << "            row 5: [0,0,0,0,83.33,0]\n"
       << "            row 6: [0,0,0,0,0,83.33]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "\n";
    return ss.str();
}

std::string test_data::anthineas_hydrostatic_test(const std::string& type)
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -5, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.0058, unit: rad}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: " << type << "\n"
       << "    \n";
    return ss.str();
}

std::string test_data::anthineas_propulsion()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 1, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.0058, unit: rad}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 2: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 3: [ 0, 0, 1.9e5,      0,      0, 0]\n"
       << "            row 4: [ 0, 0,     0, 1.74e4,      0, 0]\n"
       << "            row 5: [ 0, 0,     0,      0, 4.67e6, 0]\n"
       << "            row 6: [ 0, 0,     0,      0,      0, 0]\n"
       << "      - model: resistance curve\n"
       << "        speed: {unit: m/s, values: [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8]}\n"
       << "        resistance: {unit: N, values: [0.000E+00,2.102E+02,7.728E+02,1.647E+03,2.803E+03,4.230E+03,5.999E+03,8.498E+03,1.273E+04,2.084E+04,2.789E+04,4.238E+04,7.737E+04,1.449E+05,2.439E+05,3.590E+05,4.741E+05]}\n"
       << "    controlled forces:\n"
       << "      - name: propeller\n"
       << "        model: wageningen B-series\n"
       << "        position of propeller frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: -8.4, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 2.5, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: 3, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        wake coefficient w: 0\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0\n"
       << "        rotation: clockwise\n"
       << "        number of blades: 4\n"
       << "        blade area ratio AE/A0: 0.55\n"
       << "        diameter: {value: 1.925, unit: m}\n"
       << "    \n";
    return ss.str();
}

std::string test_data::anthineas_fast_hydrostatic_test()
{
    return anthineas_hydrostatic_test("non-linear hydrostatic (fast)");
}

std::string test_data::anthineas_exact_hydrostatic_test()
{
    return anthineas_hydrostatic_test("non-linear hydrostatic (exact)");
}

std::string test_data::anthineas_new_hydrostatic_test()
{
    return anthineas_hydrostatic_test("hydrostatic");
}

std::string test_data::anthineas_waves_test()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: waves\n"
       << "    discretization:\n"
       << "       n: 10\n"
       << "       omega min: {value: 0.1, unit: rad/s}\n"
       << "       omega max: {value: 6, unit: rad/s}\n"
       << "       energy fraction: 0.999\n"
       << "    spectra:\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 0\n"
       << "        directional spreading:\n"
       << "           type: dirac\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: jonswap\n"
       << "           Hs: {value: 5, unit: m}\n"
       << "           Tp: {value: 15, unit: m}\n"
       << "           gamma: 1.2\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 10\n"
       << "        directional spreading:\n"
       << "           type: cos2s\n"
       << "           s: 2\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: dirac\n"
       << "           omega0: {value: 0.05, unit: rad/s}\n"
       << "           Hs: {value: 15, unit: m}\n"
       << "    output:\n"
       << "        frame of reference: NED\n"
       << "        mesh:\n"
       << "            xmin: {value: 1, unit: m}\n"
       << "            xmax: {value: 5, unit: m}\n"
       << "            nx: 2\n"
       << "            ymin: {value: 1, unit: m}\n"
       << "            ymax: {value: 2, unit: m}\n"
       << "            ny: 2\n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -5, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.0058, unit: rad}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "    \n";
    return ss.str();
}

std::string test_data::waves()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1026, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: waves\n"
       << "    discretization:\n"
       << "       n: 128\n"
       << "       omega min: {value: 0.1, unit: rad/s}\n"
       << "       omega max: {value: 6, unit: rad/s}\n"
       << "       energy fraction: 0.999\n"
       << "    spectra:\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 0\n"
       << "        directional spreading:\n"
       << "           type: dirac\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: jonswap\n"
       << "           Hs: {value: 5, unit: m}\n"
       << "           Tp: {value: 15, unit: m}\n"
       << "           gamma: 1.2\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 10\n"
       << "        directional spreading:\n"
       << "           type: cos2s\n"
       << "           s: 2\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: dirac\n"
       << "           omega0: {value: 0.05, unit: rad/s}\n"
       << "           Hs: {value: 15, unit: m}\n"
       << "    output:\n"
       << "        frame of reference: NED\n"
       << "        mesh:\n"
       << "            xmin: {value: 1, unit: m}\n"
       << "            xmax: {value: 5, unit: m}\n"
       << "            nx: 5\n"
       << "            ymin: {value: 1, unit: m}\n"
       << "            ymax: {value: 2, unit: m}\n"
       << "            ny: 2\n";
    return ss.str();
}

std::string test_data::simple_waves()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1026, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: waves\n"
       << "    discretization:\n"
       << "       n: 128\n"
       << "       omega min: {value: 0.1, unit: rad/s}\n"
       << "       omega max: {value: 6, unit: rad/s}\n"
       << "       energy fraction: 0.999\n"
       << "    spectra:\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 0\n"
       << "        directional spreading:\n"
       << "           type: dirac\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: dirac\n"
       << "           omega0: {value: 0.05, unit: rad/s}\n"
       << "           Hs: {value: 15, unit: m}\n"
       << "    output:\n"
       << "        frame of reference: NED\n"
       << "        mesh:\n"
       << "            xmin: {value: -10, unit: m}\n"
       << "            xmax: {value: 10, unit: m}\n"
       << "            nx: 21\n"
       << "            ymin: {value: -20, unit: m}\n"
       << "            ymax: {value: +20, unit: m}\n"
       << "            ny: 41\n"
       << "output:\n"
       << "   - format: hdf5\n"
       << "     filename: simple_waves.h5\n"
       << "     data: ['waves']\n";
    return ss.str();
}

std::string test_data::waves_for_parser_validation_only()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "discretization:\n"
       << "   n: 128\n"
       << "   omega min: {value: 0.1, unit: rad/s}\n"
       << "   omega max: {value: 6, unit: deg/s}\n"
       << "   energy fraction: 0.123\n"
       << "spectra:\n"
       << "  - model: airy\n"
       << "    seed of the random data generator: 0\n"
       << "    depth: {value: 1.7, unit: km}\n"
       << "    directional spreading:\n"
       << "       type: dirac\n"
       << "       waves propagating to: {value: 90, unit: deg}\n"
       << "    spectral density:\n"
       << "       type: jonswap\n"
       << "       Hs: {value: 5, unit: m}\n"
       << "       Tp: {value: 15, unit: m}\n"
       << "       gamma: 1.2\n"
       << "  - model: airy\n"
       << "    depth: {value: 12, unit: m}\n"
       << "    seed of the random data generator: 1872\n"
       << "    directional spreading:\n"
       << "       type: cos2s\n"
       << "       s: 2\n"
       << "       waves propagating to: {value: 90, unit: deg}\n"
       << "    spectral density:\n"
       << "       type: dirac\n"
       << "       Hs: {value: 5, unit: m}\n"
       << "       Tp: {value: 15, unit: m}\n"
       << "output:\n"
       << "    frame of reference: NED\n"
       << "    mesh:\n"
       << "       xmin: {value: -10, unit: m}\n"
       << "       xmax: {value: 1, unit: km}\n"
       << "       nx: 10\n"
       << "       ymin: {value: -20, unit: m}\n"
       << "       ymax: {value: 3, unit: km}\n"
       << "       ny: 20\n";
    return ss.str();
}

std::string test_data::cube_in_waves()
{
    std::stringstream ss;
        ss << "rotations convention: [psi, theta', phi'']\n"
           << "\n"
           << "environmental constants:\n"
           << "    g: {value: 9.81, unit: m/s^2}\n"
           << "    rho: {value: 1026, unit: kg/m^3}\n"
           << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
           << "environment models:\n"
           << "  - model: waves\n"
           << "    discretization:\n"
           << "       n: 128\n"
           << "       omega min: {value: 0.1, unit: rad/s}\n"
           << "       omega max: {value: 6, unit: rad/s}\n"
           << "       energy fraction: 0.999\n"
           << "    spectra:\n"
           << "      - model: airy\n"
           << "        depth: {value: 100, unit: m}\n"
           << "        seed of the random data generator: 0\n"
           << "        directional spreading:\n"
           << "           type: dirac\n"
           << "           waves propagating to: {value: 90, unit: deg}\n"
           << "        spectral density:\n"
           << "           type: jonswap\n"
           << "           Hs: {value: 5, unit: m}\n"
           << "           Tp: {value: 15, unit: m}\n"
           << "           gamma: 1.2\n"
           << "      - model: airy\n"
           << "        depth: {value: 100, unit: m}\n"
           << "        seed of the random data generator: 10\n"
           << "        directional spreading:\n"
           << "           type: cos2s\n"
           << "           s: 2\n"
           << "           waves propagating to: {value: 90, unit: deg}\n"
           << "        spectral density:\n"
           << "           type: dirac\n"
           << "           Hs: {value: 5, unit: m}\n"
           << "           omega0: {value: 0.05, unit: rad/s}\n"
           << "    output:\n"
           << "        frame of reference: cube\n"
           << "        mesh:\n"
           << "            xmin: {value: 1, unit: m}\n"
           << "            xmax: {value: 5, unit: m}\n"
           << "            nx: 5\n"
           << "            ymin: {value: 1, unit: m}\n"
           << "            ymax: {value: 2, unit: m}\n"
           << "            ny: 2\n"
           << "\n"
           << "bodies: # All bodies have NED as parent frame\n"
           << "  - name: cube\n"
           << "    mesh: cube.stl\n"
           << "    position of body frame relative to mesh:\n"
           << "        frame: mesh\n"
           << "        x: {value: 0, unit: m}\n"
           << "        y: {value: 0, unit: m}\n"
           << "        z: {value: 0.5, unit: m}\n"
           << "        phi: {value: 0, unit: rad}\n"
           << "        theta: {value: 0, unit: rad}\n"
           << "        psi: {value: 0, unit: rad}\n"
           << "    initial position of body frame relative to NED:\n"
           << "        frame: NED\n"
           << "        x: {value:  0, unit: m}\n"
           << "        y: {value: 0, unit: m}\n"
           << "        z: {value: 0.4746588693957115, unit: m}\n"
           << "        phi: {value: 0, unit: rad}\n"
           << "        theta: {value: 0, unit: rad}\n"
           << "        psi: {value: 0, unit: rad}\n"
           << "    initial velocity of body frame relative to NED:\n"
           << "        frame: cube\n"
           << "        u: {value: 1, unit: m/s}\n"
           << "        v: {value: 2, unit: m/s}\n"
           << "        w: {value: 0, unit: m/s}\n"
           << "        p: {value: 0, unit: rad/s}\n"
           << "        q: {value: 0, unit: rad/s}\n"
           << "        r: {value: 0, unit: rad/s}\n"
           << "    dynamics:\n"
           << "        hydrodynamic forces calculation point in body frame:\n"
           << "            x: {value: 0.696, unit: m}\n"
           << "            y: {value: 0, unit: m}\n"
           << "            z: {value: 1.418, unit: m}\n"
           << "        centre of inertia:\n"
           << "            frame: cube\n"
           << "            x: {value: 0, unit: m}\n"
           << "            y: {value: 0, unit: m}\n"
           << "            z: {value: 0.5, unit: m}\n"
           << "        mass: {value: 1, unit: tonne}\n"
           << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
           << "            frame: cube\n"
           << "            row 1: [1E3,0,0,0,0,0]\n"
           << "            row 2: [0,1E3,0,0,0,0]\n"
           << "            row 3: [0,0,1E3,0,0,0]\n"
           << "            row 4: [0,0,0,1E3,0,0]\n"
           << "            row 5: [0,0,0,0,1E3,0]\n"
           << "            row 6: [0,0,0,0,0,1E3]\n"
           << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
           << "            frame: cube\n"
           << "            row 1: [0,0,0,0,0,0]\n"
           << "            row 2: [0,0,0,0,0,0]\n"
           << "            row 3: [0,0,0,0,0,0]\n"
           << "            row 4: [0,0,0,0,0,0]\n"
           << "            row 5: [0,0,0,0,0,0]\n"
           << "            row 6: [0,0,0,0,0,0]\n"
           << "    external forces:\n"
           << "      - model: gravity\n"
           << "      - model: non-linear hydrostatic (fast)\n";
        return ss.str();
}

std::string test_data::anthineas_froude_krylov()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: waves\n"
       << "    discretization:\n"
       << "       n: 10\n"
       << "       omega min: {value: 0.1, unit: rad/s}\n"
       << "       omega max: {value: 6, unit: rad/s}\n"
       << "       energy fraction: 0.999\n"
       << "    spectra:\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 0\n"
       << "        directional spreading:\n"
       << "           type: dirac\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: jonswap\n"
       << "           Hs: {value: 5, unit: m}\n"
       << "           Tp: {value: 15, unit: m}\n"
       << "           gamma: 1.2\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 10\n"
       << "        directional spreading:\n"
       << "           type: cos2s\n"
       << "           s: 2\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: dirac\n"
       << "           omega0: {value: 0.05, unit: rad/s}\n"
       << "           Hs: {value: 15, unit: m}\n"
       << "    output:\n"
       << "        frame of reference: NED\n"
       << "        mesh:\n"
       << "            xmin: {value: 1, unit: m}\n"
       << "            xmax: {value: 5, unit: m}\n"
       << "            nx: 2\n"
       << "            ymin: {value: 1, unit: m}\n"
       << "            ymax: {value: 2, unit: m}\n"
       << "            ny: 2\n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -5, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.0058, unit: rad}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: non-linear Froude-Krylov\n"
       << "    \n";
    return ss.str();
}

std::string test_data::anthineas_diffraction()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: waves\n"
       << "    discretization:\n"
       << "       n: 10\n"
       << "       omega min: {value: 1.58, unit: rad/s}\n"
       << "       omega max: {value: 6.2, unit: rad/s}\n"
       << "       energy fraction: 0.999\n"
       << "    spectra:\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 0\n"
       << "        directional spreading:\n"
       << "           type: dirac\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: jonswap\n"
       << "           Hs: {value: 5, unit: m}\n"
       << "           Tp: {value: 15, unit: m}\n"
       << "           gamma: 1.2\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 10\n"
       << "        directional spreading:\n"
       << "           type: cos2s\n"
       << "           s: 2\n"
       << "           waves propagating to: {value: 90, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: dirac\n"
       << "           omega0: {value: 1.6, unit: rad/s}\n"
       << "           Hs: {value: 15, unit: m}\n"
       << "    output:\n"
       << "        frame of reference: NED\n"
       << "        mesh:\n"
       << "            xmin: {value: 1, unit: m}\n"
       << "            xmax: {value: 5, unit: m}\n"
       << "            nx: 2\n"
       << "            ymin: {value: 1, unit: m}\n"
       << "            ymax: {value: 2, unit: m}\n"
       << "            ny: 2\n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -5, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.0058, unit: rad}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: non-linear Froude-Krylov\n"
       << "      - model: diffraction\n"
       << "        hdb: anthineas.hdb\n"
       << "        calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        mirror for 180 to 360: true\n"
       << "    \n";
    return ss.str();
}

std::string test_data::anthineas_damping()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    frame: NED\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "\n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -5, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.0058, unit: rad}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 2: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 3: [ 0, 0, 1.9e5,      0,      0, 0]\n"
       << "            row 4: [ 0, 0,     0, 1.74e4,      0, 0]\n"
       << "            row 5: [ 0, 0,     0,      0, 4.67e6, 0]\n"
       << "            row 6: [ 0, 0,     0,      0,      0, 0]\n"
       << "    \n";
    return ss.str();
}

std::string test_data::controlled_forces()
{
    std::stringstream ss;
    ss << "- name: propeller\n"
          "  t: [0,1,3,10]\n"
          "  rpm: {unit: rad/s, values: [3, 30, 30, 40]}\n"
          "  P/D: [1.064935,1.064935,1.064935,1.064935]\n"
          "- name: controller\n"
          "  t: [0,1,3,10]\n"
          "  psi_co: {unit: rad, values: [0.25, 0.30, 0.40, 0]}\n";

    return ss.str();
}

std::string test_data::bug_2961()
{
    std::stringstream ss;
    ss << "- name: controller\n"
          "  t: [0]\n"
          "  psi_co: {unit: deg, values: [30]}\n";

    return ss.str();
}

std::string test_data::wageningen()
{
    std::stringstream ss;
    ss << "name: port side propeller\n"
          "model: wageningen B-series\n"
          "position of propeller frame:\n"
          "    frame: mesh(body 1)\n"
          "    x: {value: -4, unit: m}\n"
          "    y: {value: -2, unit: m}\n"
          "    z: {value: 2, unit: m}\n"
          "    phi: {value: 0, unit: rad}\n"
          "    theta: {value: -10, unit: deg}\n"
          "    psi: {value: -1, unit: deg}\n"
          "wake coefficient w: 0.9\n"
          "relative rotative efficiency etaR: 1\n"
          "thrust deduction factor t: 0.7\n"
          "rotation: clockwise\n"
          "number of blades: 3\n"
          "blade area ratio AE/A0: 0.5\n"
          "diameter: {value: 2, unit: m}";
    return ss.str();
}

std::string test_data::resistance_curve()
{
    std::stringstream ss;
    ss << "speed: {unit: knot, values: [0,1,2,3,4,5,15,20]}\n"
       << "resistance: {unit: MN, values: [0,1,4,9,16,25,225,400]}";
    return ss.str();
}

std::string test_data::propulsion_and_resistance()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 1, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: resistance curve\n"
       << "        speed: {unit: m/s, values: [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8]}\n"
       << "        resistance: {unit: N, values: [0.000E+00,2.102E+02,7.728E+02,1.647E+03,2.803E+03,4.230E+03,5.999E+03,8.498E+03,1.273E+04,2.084E+04,2.789E+04,4.238E+04,7.737E+04,1.449E+05,2.439E+05,3.590E+05,4.741E+05]}\n"
       << "    controlled forces:\n"
       << "      - name: propeller\n"
       << "        model: wageningen B-series\n"
       << "        position of propeller frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: -8.4, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: 0, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        wake coefficient w: 0\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0\n"
       << "        rotation: clockwise\n"
       << "        number of blades: 4\n"
       << "        blade area ratio AE/A0: 0.55\n"
       << "        diameter: {value: 1.925, unit: m}\n"
       << "    \n";
    return ss.str();
}

std::string test_data::radiation_damping()
{
    std::stringstream ss;
    ss << "model: radiation damping\n"
       << "hdb: anthineas.hdb\n"
       << "type of quadrature for cos transform: simpson\n"
       << "type of quadrature for convolution: clenshaw-curtis\n"
       << "nb of points for retardation function discretization: 50\n"
       << "omega min: {value: 0, unit: rad/s}\n"
       << "omega max: {value: 30, unit: rad/s}\n"
       << "tau min: {value: 0.2094395, unit: s}\n"
       << "tau max: {value: 10, unit: s}\n"
       << "output Br and K: true\n"
       << "calculation point in body frame:\n"
       << "    x: {value: 0.696, unit: m}\n"
       << "    y: {value: 0, unit: m}\n"
       << "    z: {value: 1.418, unit: m}\n";
    return ss.str();
}

std::string test_data::diffraction()
{
    std::stringstream ss;
    ss << "model: diffraction\n"
       << "hdb: anthineas.hdb\n"
       << "calculation point in body frame:\n"
       << "    x: {value: 0.696, unit: m}\n"
       << "    y: {value: 0, unit: m}\n"
       << "    z: {value: 1.418, unit: m}\n"
       << "mirror for 180 to 360: true\n";
    return ss.str();
}

std::string test_data::anthineas_radiation_damping()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 1, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: resistance curve\n"
       << "        speed: {unit: m/s, values: [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8]}\n"
       << "        resistance: {unit: N, values: [0.000E+00,2.102E+02,7.728E+02,1.647E+03,2.803E+03,4.230E+03,5.999E+03,8.498E+03,1.273E+04,2.084E+04,2.789E+04,4.238E+04,7.737E+04,1.449E+05,2.439E+05,3.590E+05,4.741E+05]}\n"
       << "      - model: radiation damping\n"
       << "        hdb: anthineas.hdb\n"
       << "        type of quadrature for cos transform: simpson\n"
       << "        type of quadrature for convolution: clenshaw-curtis\n"
       << "        nb of points for retardation function discretization: 50\n"
       << "        omega min: {value: 0, unit: rad/s}\n"
       << "        omega max: {value: 30, unit: rad/s}\n"
       << "        tau min: {value: 0.2094395, unit: s}\n"
       << "        tau max: {value: 10, unit: s}\n"
       << "        output Br and K: true\n"
       << "        calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "    controlled forces:\n"
       << "      - name: propeller\n"
       << "        model: wageningen B-series\n"
       << "        position of propeller frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: -8.4, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: 0, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        wake coefficient w: 0\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0\n"
       << "        rotation: clockwise\n"
       << "        number of blades: 4\n"
       << "        blade area ratio AE/A0: 0.55\n"
       << "        diameter: {value: 1.925, unit: m}\n"
       << "    \n";
        return ss.str();
}

std::string test_data::simple_track_keeping()
{
    std::stringstream ss;
    ss << "name: controller\n"
       << "model: simple heading controller\n"
       << "ksi: 0.9\n"
       << "Tp: {value: 4, unit: s}\n";
    return ss.str();
}

std::string test_data::maneuvering()
{
    std::stringstream ss;
    ss << "reference frame:\n"
       << "    frame: Anthineas\n"
       << "    x: {value: 0.696, unit: m}\n"
       << "    y: {value: 0, unit: m}\n"
       << "    z: {value: 1.418, unit: m}\n"
       << "    phi: {value: 0.7, unit: rad}\n"
       << "    theta: {value: 2, unit: deg}\n"
       << "    psi: {value: 0.3, unit: deg}\n"
       << "name: test\n"
       << "commands: [a,b,c]\n"
       << "X: 0.5*rho*Vs^2*L^2*X_\n"
       << "Y: 0.5*rho*Vs^2*L^2*Y_\n"
       << "Z: 0\n"
       << "K: 0\n"
       << "M: 0\n"
       << "N: 0.5*rho*Vs^2*L^3*N_\n"
       << "rho: 1024\n"
       << "Vs: sqrt(u(t)^2+v(t)^2)\n"
       << "L: 21.569\n"
       << "X_: Xu*u_ + Xuu*u_^2 + Xuuu*u_^3 + Xvv*v_^2 + Xrr*r_^2 + Xvr*abs(v_)*abs(r_)\n"
       << "Y_: Yv*v_ + Yvv*v_*abs(v_) + Yvvv*v_^3 + Yvrr*v_*r_^2 + Yr*r_ + Yrr*r_*abs(r_) + Yrrr*r_^3 + Yrvv*r_*v_^2\n"
       << "N_: Nv*v_ + Nvv*v_*abs(v_) + Nvvv*v_^3 + Nvrr*v_*r_^2 + Nr*r_ + Nrr*r_*abs(r_) + Nrrr*r_^3 + Nrvv*r_*v_^2\n"
       << "u_: u(t)/Vs\n"
       << "v_: v(t)/Vs\n"
       << "r_: r(t)/Vs*L\n"
       << "Xu: 0\n"
       << "Xuu: 0\n"
       << "Xuuu: 0\n"
       << "Xvv: -0.041\n"
       << "Xrr: -0.01\n"
       << "Xvr: -0.015\n"
       << "Yv: -0.13\n"
       << "Yvv: -0.18\n"
       << "Yvvv: 0\n"
       << "Yvrr: 0\n"
       << "Yr: 0.015\n"
       << "Yrr: 0.021\n"
       << "Yrrr: 0\n"
       << "Yrvv: 0\n"
       << "Nv: -0.37\n"
       << "Nvv: -0.12\n"
       << "Nvvv: 0\n"
       << "Nvrr: 0\n"
       << "Nr: -0.1\n"
       << "Nrr: 0.005\n"
       << "Nrrr: 0\n"
       << "Nrvv: 0\n"
       << "\n";
    return ss.str();
}

std::string test_data::bug_2641()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "\n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -0.099, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.334, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (exact)\n"
       << "      - model: linear damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 2: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 3: [ 0, 0, 1.9e5,      0,      0, 0]\n"
       << "            row 4: [ 0, 0,     0, 1.74e4,      0, 0]\n"
       << "            row 5: [ 0, 0,     0,      0, 4.67e6, 0]\n"
       << "            row 6: [ 0, 0,     0,      0,      0, 0]\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 2: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 3: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 4: [ 0, 0, 0, 1.45e6, 0, 0]\n"
       << "            row 5: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 6: [ 0, 0, 0,      0, 0, 0]\n"
       << "      - model: resistance curve\n"
       << "        speed: {unit: m/s, values: [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8]}\n"
       << "        resistance: {unit: N, values: [0.000E+00,2.102E+02,7.728E+02,1.647E+03,2.803E+03,4.230E+03,5.999E+03,8.498E+03,1.273E+04,2.084E+04,2.789E+04,4.238E+04,7.737E+04,1.449E+05,2.439E+05,3.590E+05,4.741E+05]}\n"
       << "    controlled forces:\n"
       << "      - name: propeller\n"
       << "        model: wageningen B-series\n"
       << "        position of propeller frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: -8.4, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 2.5, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: 3, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        wake coefficient w: 0\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0\n"
       << "        rotation: clockwise\n"
       << "        number of blades: 4\n"
       << "        blade area ratio AE/A0: 0.55\n"
       << "        diameter: {value: 1.925, unit: m}\n"
       << "\n"
       << "output:\n"
       << "   - format: csv\n"
       << "     filename: acceleration.csv\n"
       << "     data: [t, x(Anthineas), y(Anthineas), z(Anthineas), u(Anthineas), v(Anthineas), w(Anthineas), p(Anthineas), q(Anthineas), r(Anthineas), phi(Anthineas), theta(Anthineas), psi(Anthineas)]\n";
    return ss.str();
}

std::string test_data::simple_station_keeping()
{
    std::stringstream ss;
    ss << "name: controller\n"
       << "model: simple station-keeping controller\n"
       << "ksi_x: 0.9\n"
       << "T_x: {value: 2, unit: s}\n"
       << "ksi_y: 0.85\n"
       << "T_y: {value: 3, unit: s}\n"
       << "ksi_psi: 0.8\n"
       << "T_psi: {value: 4, unit: s}\n";
    return ss.str();
}

std::string test_data::rudder()
{
    std::stringstream ss;
    ss << "name: port side propeller\n"
          "model: wageningen B-series\n"
          "position of propeller frame:\n"
          "    frame: mesh(body 1)\n"
          "    x: {value: -4, unit: m}\n"
          "    y: {value: -2, unit: m}\n"
          "    z: {value: 2, unit: m}\n"
          "    phi: {value: 0, unit: rad}\n"
          "    theta: {value: -10, unit: deg}\n"
          "    psi: {value: -1, unit: deg}\n"
          "wake coefficient w: 0.9\n"
          "relative rotative efficiency etaR: 1\n"
          "thrust deduction factor t: 0.7\n"
          "rotation: clockwise\n"
          "number of blades: 3\n"
          "blade area ratio AE/A0: 0.5\n"
          "diameter: {value: 2, unit: m}\n"
          "rudder area: {value: 2.2, unit: m^2}\n"
          "rudder height: {value: 2, unit: m^2}\n"
          "effective aspect ratio factor: 1.7\n"
          "lift tuning coefficient: 2.1\n"
          "drag tuning coefficient: 1\n"
          "position of rudder in body frame:\n"
          "    x: {value: -5.1, unit: m}\n"
          "    y: {value: -2, unit: m}\n"
          "    z: {value: 2, unit: m}\n";
    return ss.str();
}

std::string test_data::bug_in_exact_hydrostatic()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1026, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: cube\n"
       << "    mesh: cube.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.5, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value:  0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.4746588693957115, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: cube\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: cube\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.5, unit: m}\n"
       << "        mass: {value: 1, unit: tonne}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [1E3,0,0,0,0,0]\n"
       << "            row 2: [0,1E3,0,0,0,0]\n"
       << "            row 3: [0,0,1E3,0,0,0]\n"
       << "            row 4: [0,0,0,1E3,0,0]\n"
       << "            row 5: [0,0,0,0,1E3,0]\n"
       << "            row 6: [0,0,0,0,0,1E3]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (exact)\n";
    return ss.str();
}
std::string test_data::bug_2714_heading_keeping()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -0.099, unit: m}\n"
       << "        phi: {value: 10, unit: deg}\n"
       << "        theta: {value: -.334, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: linear damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 2: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 3: [ 0, 0, 1.9e5,      0,      0, 0]\n"
       << "            row 4: [ 0, 0,     0, 1.74e4,      0, 0]\n"
       << "            row 5: [ 0, 0,     0,      0, 4.67e6, 0]\n"
       << "            row 6: [ 0, 0,     0,      0,      0, 0]\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 2: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 3: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 4: [ 0, 0, 0, 1.45e6, 0, 0]\n"
       << "            row 5: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 6: [ 0, 0, 0,      0, 0, 0]\n"
       << "    controlled forces:\n"
       << "      - name: controller\n"
       << "        model: simple heading controller\n"
       << "        ksi: 0.9\n"
       << "        Tp: {value: 4, unit: s}\n"
       << "\n"
       << "output:\n"
       << "   - format: csv\n"
       << "     filename: extinctionRoulis.csv\n"
       << "     data: [t, x(Anthineas), y(Anthineas), z(Anthineas), u(Anthineas), v(Anthineas), w(Anthineas), p(Anthineas), q(Anthineas), r(Anthineas), phi(Anthineas), theta(Anthineas), psi(Anthineas)]\n";
    return ss.str();
}

std::string test_data::bug_2714_station_keeping()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -0.099, unit: m}\n"
       << "        phi: {value: 10, unit: deg}\n"
       << "        theta: {value: -.334, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: linear damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 2: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 3: [ 0, 0, 1.9e5,      0,      0, 0]\n"
       << "            row 4: [ 0, 0,     0, 1.74e4,      0, 0]\n"
       << "            row 5: [ 0, 0,     0,      0, 4.67e6, 0]\n"
       << "            row 6: [ 0, 0,     0,      0,      0, 0]\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 2: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 3: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 4: [ 0, 0, 0, 1.45e6, 0, 0]\n"
       << "            row 5: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 6: [ 0, 0, 0,      0, 0, 0]\n"
       << "    controlled forces:\n"
       << "      - name: controller\n"
       << "        model: simple station-keeping controller\n"
       << "        ksi_x: 0.9\n"
       << "        T_x: {value: 4, unit: s}\n"
       << "        ksi_y: 0.9\n"
       << "        T_y: {value: 4, unit: s}\n"
       << "        ksi_psi: 0.9\n"
       << "        T_psi: {value: 4, unit: s}\n"
       << "\n"
       << "output:\n"
       << "   - format: csv\n"
       << "     filename: extinctionRoulis.csv\n"
       << "     data: [t, x(Anthineas), y(Anthineas), z(Anthineas), u(Anthineas), v(Anthineas), w(Anthineas), p(Anthineas), q(Anthineas), r(Anthineas), phi(Anthineas), theta(Anthineas), psi(Anthineas)]\n";
    return ss.str();
}

std::string test_data::bug_2732()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -0.099, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.334, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 10, unit: kt}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: linear damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 2: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 3: [ 0, 0, 1.9e5,      0,      0, 0]\n"
       << "            row 4: [ 0, 0,     0, 1.74e4,      0, 0]\n"
       << "            row 5: [ 0, 0,     0,      0, 4.67e6, 0]\n"
       << "            row 6: [ 0, 0,     0,      0,      0, 0]\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 2: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 3: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 4: [ 0, 0, 0, 1.45e6, 0, 0]\n"
       << "            row 5: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 6: [ 0, 0, 0,      0, 0, 0]\n"
       << "      - model: resistance curve\n"
       << "        speed: {unit: m/s, values: [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8]}\n"
       << "        resistance: {unit: N, values: [0.000E+00,2.102E+02,7.728E+02,1.647E+03,2.803E+03,4.230E+03,5.999E+03,8.498E+03,1.273E+04,2.084E+04,2.789E+04,4.238E+04,7.737E+04,1.449E+05,2.439E+05,3.590E+05,4.741E+05]}\n"
       << "    controlled forces:\n"
       << "      - model: maneuvering\n"
       << "        name: maneuvering\n"
       << "        reference frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "            phi: {value: 0, unit: deg}\n"
       << "            theta: {value: 0, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        X: 0.5*rho*Vs^2*L^2*X_\n"
       << "        Y: 0.5*rho*Vs^2*L^2*Y_\n"
       << "        Z: 0\n"
       << "        K: 0\n"
       << "        M: 0\n"
       << "        N: 0.5*rho*Vs^2*L^3*N_\n"
       << "        rho: 1025\n"
       << "        Vs: sqrt(u(t)^2+v(t)^2)\n"
       << "        L: 21.569\n"
       << "        X_: Xu*u_ + Xuu*u_^2 + Xuuu*u_^3 + Xvv*v_^2 + Xrr*r_^2 + Xvr*abs(v_)*abs(r_)\n"
       << "        Y_: Yv*v_ + Yvv*v_*abs(v_) + Yvvv*v_^3 + Yvrr*v_*r_^2 + Yr*r_ + Yrr*r_*abs(r_) + Yrrr*r_^3 + Yrvv*r_*v_^2\n"
       << "        N_: Nv*v_ + Nvv*v_*abs(v_) + Nvvv*v_^3 + Nvrr*v_*r_^2 + Nr*r_ + Nrr*r_*abs(r_) + Nrrr*r_^3 + Nrvv*r_*v_^2\n"
       << "        u_: u(t)/Vs\n"
       << "        v_: v(t)/Vs\n"
       << "        r_: r(t)/Vs*L\n"
       << "        Xu: 0\n"
       << "        Xuu: 0\n"
       << "        Xuuu: 0\n"
       << "        Xvv: -0.041\n"
       << "        Xrr: -0.01\n"
       << "        Xvr: -0.015\n"
       << "        Yv: -0.13\n"
       << "        Yvv: -0.18\n"
       << "        Yvvv: 0\n"
       << "        Yvrr: 0\n"
       << "        Yr: 0.015\n"
       << "        Yrr: 0.021\n"
       << "        Yrrr: 0\n"
       << "        Yrvv: 0\n"
       << "        Nv: -0.37\n"
       << "        Nvv: -0.12\n"
       << "        Nvvv: 0\n"
       << "        Nvrr: 0\n"
       << "        Nr: -0.1\n"
       << "        Nrr: 0.005\n"
       << "        Nrrr: 0\n"
       << "        Nrvv: 0\n"
       << "      - name: Prop. & rudder\n"
       << "        model: propeller+rudder\n"
       << "        position of propeller frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: -8.4, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 2.5, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: 3, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        wake coefficient w: 0\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0\n"
       << "        rotation: clockwise\n"
       << "        number of blades: 4\n"
       << "        blade area ratio AE/A0: 0.55\n"
       << "        diameter: {value: 1.925, unit: m}\n"
       << "        rudder area: {value: 2.2, unit: m^2}\n"
       << "        rudder height: {value: 2, unit: m^2}\n"
       << "        effective aspect ratio factor: 1.7\n"
       << "        lift tuning coefficient: 2.1\n"
       << "        drag tuning coefficient: 1\n"
       << "        position of rudder in body frame:\n"
       << "            x: {value: -9.5, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 2.5, unit: m}\n"
       << "\n"
       << "output:\n"
       << "   - format: csv\n"
       << "     filename: propRudd.csv\n"
       << "     data: [t, 'Fx(Prop. & rudder,Anthineas,Anthineas)', 'Fx(maneuvering,Anthineas,NED)']\n";
    return ss.str();
}

std::string test_data::L_config()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1026, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models: []\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: L\n"
       << "    mesh: L.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0.5, unit: m}\n"
       << "        y: {value: 0.8333333333, unit: m}\n"
       << "        z: {value: -0.8333333333, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value:  0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: cube\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: L\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.5, unit: m}\n"
       << "        mass: {value: 1, unit: tonne}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: L\n"
       << "            row 1: [1E3,0,0,0,0,0]\n"
       << "            row 2: [0,1E3,0,0,0,0]\n"
       << "            row 3: [0,0,1E3,0,0,0]\n"
       << "            row 4: [0,0,0,1E3,0,0]\n"
       << "            row 5: [0,0,0,0,1E3,0]\n"
       << "            row 6: [0,0,0,0,0,1E3]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: L\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n";
    return ss.str();
}

std::string test_data::GM_cube()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1000, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: cube\n"
       << "    mesh: cube.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0.5, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value:  0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 0, unit: m}\n"
       << "        phi: {value: 60, unit: deg}\n"
       << "        theta: {value: 0, unit: deg}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: cube\n"
       << "        u: {value: 0, unit: m/s}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: cube\n"
       << "            x: {value: 0, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0, unit: m}\n"
       << "        mass: {value: 0.5, unit: tonne}\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [1E3,0,0,0,0,0]\n"
       << "            row 2: [0,1E3,0,0,0,0]\n"
       << "            row 3: [0,0,1E3,0,0,0]\n"
       << "            row 4: [0,0,0,1E3,0,0]\n"
       << "            row 5: [0,0,0,0,1E3,0]\n"
       << "            row 6: [0,0,0,0,0,1E3]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: cube\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: GM\n"
       << "        #name of hydrostatic force model: non-linear hydrostatic (fast)\n"
       << "        name of hydrostatic force model: hydrostatic\n"
       << "        roll step: {value: 60, unit: degree}\n";
    return ss.str();
}

std::string test_data::bug_2838()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -0.099, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.334, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 10, unit: kt}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: linear damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 2: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 3: [ 0, 0, 1.9e5,      0,      0, 0]\n"
       << "            row 4: [ 0, 0,     0, 1.74e4,      0, 0]\n"
       << "            row 5: [ 0, 0,     0,      0, 4.67e6, 0]\n"
       << "            row 6: [ 0, 0,     0,      0,      0, 0]\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 2: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 3: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 4: [ 0, 0, 0, 1.45e6, 0, 0]\n"
       << "            row 5: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 6: [ 0, 0, 0,      0, 0, 0]\n"
       << "      - model: resistance curve\n"
       << "        speed: {unit: m/s, values: [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8]}\n"
       << "        resistance: {unit: N, values: [0.000E+00,2.102E+02,7.728E+02,1.647E+03,2.803E+03,4.230E+03,5.999E+03,8.498E+03,1.273E+04,2.084E+04,2.789E+04,4.238E+04,7.737E+04,1.449E+05,2.439E+05,3.590E+05,4.741E+05]}\n"
       << "    controlled forces:\n"
       << "      - model: maneuvering\n"
       << "        name: maneuvering\n"
       << "        reference frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "            phi: {value: 0, unit: deg}\n"
       << "            theta: {value: 0, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        X: 0.5*rho*Vs^2*L^2*X_\n"
       << "        Y: 0.5*rho*Vs^2*L^2*Y_\n"
       << "        Z: 0\n"
       << "        K: 0\n"
       << "        M: 0\n"
       << "        N: 0.5*rho*Vs^2*L^3*N_\n"
       << "        rho: 1025\n"
       << "        Vs: sqrt(u(t)^2+v(t)^2)\n"
       << "        L: 21.569\n"
       << "        X_: Xu*u_ + Xuu*u_^2 + Xuuu*u_^3 + Xvv*v_^2 + Xrr*r_^2 + Xvr*abs(v_)*abs(r_)\n"
       << "        Y_: Yv*v_ + Yvv*v_*abs(v_) + Yvvv*v_^3 + Yvrr*v_*r_^2 + Yr*r_ + Yrr*r_*abs(r_) + Yrrr*r_^3 + Yrvv*r_*v_^2\n"
       << "        N_: Nv*v_ + Nvv*v_*abs(v_) + Nvvv*v_^3 + Nvrr*v_*r_^2 + Nr*r_ + Nrr*r_*abs(r_) + Nrrr*r_^3 + Nrvv*r_*v_^2\n"
       << "        u_: u(t)/Vs\n"
       << "        v_: v(t)/Vs\n"
       << "        r_: r(t)/Vs*L\n"
       << "        Xu: 0\n"
       << "        Xuu: 0\n"
       << "        Xuuu: 0\n"
       << "        Xvv: -0.041\n"
       << "        Xrr: -0.01\n"
       << "        Xvr: -0.015\n"
       << "        Yv: -0.13\n"
       << "        Yvv: -0.18\n"
       << "        Yvvv: 0\n"
       << "        Yvrr: 0\n"
       << "        Yr: 0.015\n"
       << "        Yrr: 0.021\n"
       << "        Yrrr: 0\n"
       << "        Yrvv: 0\n"
       << "        Nv: -0.37\n"
       << "        Nvv: -0.12\n"
       << "        Nvvv: 0\n"
       << "        Nvrr: 0\n"
       << "        Nr: -0.1\n"
       << "        Nrr: 0.005\n"
       << "        Nrrr: 0\n"
       << "        Nrvv: 0\n"
       << "      - name: PropRudd\n"
       << "        model: propeller+rudder\n"
       << "        position of propeller frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: -8.4, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 2.5, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: 3, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        wake coefficient w: 0\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0\n"
       << "        rotation: clockwise\n"
       << "        number of blades: 4\n"
       << "        blade area ratio AE/A0: 0.55\n"
       << "        diameter: {value: 1.925, unit: m}\n"
       << "        rudder area: {value: 2.2, unit: m^2}\n"
       << "        rudder height: {value: 2, unit: m^2}\n"
       << "        effective aspect ratio factor: 1.7\n"
       << "        lift tuning coefficient: 2.1\n"
       << "        drag tuning coefficient: 1\n"
       << "        position of rudder in body frame:\n"
       << "            x: {value: -9.5, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 2.5, unit: m}\n"
       << "\n"
       << "output:\n"
       << "   - format: map\n"
       << "     filename: efforts.h5\n"
       << "     data: [t,  'Mz(PropRudd,Anthineas,Anthineas)']\n";
    return ss.str();
}

std::string test_data::bug_2845()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -0.099, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.334, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 10, unit: kt}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    external forces:\n"
       << "      - model: gravity\n"
       << "      - model: non-linear hydrostatic (fast)\n"
       << "      - model: linear damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 2: [ 0, 0,     0,      0,      0, 0]\n"
       << "            row 3: [ 0, 0, 1.9e5,      0,      0, 0]\n"
       << "            row 4: [ 0, 0,     0, 1.74e4,      0, 0]\n"
       << "            row 5: [ 0, 0,     0,      0, 4.67e6, 0]\n"
       << "            row 6: [ 0, 0,     0,      0,      0, 0]\n"
       << "      - model: quadratic damping\n"
       << "        damping matrix at the center of gravity projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 2: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 3: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 4: [ 0, 0, 0, 1.45e6, 0, 0]\n"
       << "            row 5: [ 0, 0, 0,      0, 0, 0]\n"
       << "            row 6: [ 0, 0, 0,      0, 0, 0]\n"
       << "      - model: resistance curve\n"
       << "        speed: {unit: m/s, values: [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8]}\n"
       << "        resistance: {unit: N, values: [0.000E+00,2.102E+02,7.728E+02,1.647E+03,2.803E+03,4.230E+03,5.999E+03,8.498E+03,1.273E+04,2.084E+04,2.789E+04,4.238E+04,7.737E+04,1.449E+05,2.439E+05,3.590E+05,4.741E+05]}\n"
       << "    controlled forces:\n"
       << "      - model: maneuvering\n"
       << "        name: Fman\n"
       << "        reference frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "            phi: {value: 0, unit: deg}\n"
       << "            theta: {value: 0, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        X: 0.5*rho*Vs^2*L^2*X_\n"
       << "        Y: 0.5*rho*Vs^2*L^2*Y_\n"
       << "        Z: 0\n"
       << "        K: 0\n"
       << "        M: 0\n"
       << "        N: 0.5*rho*Vs^2*L^3*N_\n"
       << "        rho: 1025\n"
       << "        Vs: sqrt(u(t)^2+v(t)^2)\n"
       << "        L: 21.569\n"
       << "        X_: Xu*u_ + Xuu*u_^2 + Xuuu*u_^3 + Xvv*v_^2 + Xrr*r_^2 + Xvr*abs(v_)*abs(r_)\n"
       << "        Y_: Yv*v_ + Yvv*v_*abs(v_) + Yvvv*v_^3 + Yvrr*v_*r_^2 + Yr*r_ + Yrr*r_*abs(r_) + Yrrr*r_^3 + Yrvv*r_*v_^2\n"
       << "        N_: Nv*v_ + Nvv*v_*abs(v_) + Nvvv*v_^3 + Nvrr*v_*r_^2 + Nr*r_ + Nrr*r_*abs(r_) + Nrrr*r_^3 + Nrvv*r_*v_^2\n"
       << "        u_: u(t)/Vs\n"
       << "        v_: v(t)/Vs\n"
       << "        r_: r(t)/Vs*L\n"
       << "        Xu: 0\n"
       << "        Xuu: 0\n"
       << "        Xuuu: 0\n"
       << "        Xvv: -0.041\n"
       << "        Xrr: -0.01\n"
       << "        Xvr: -0.015\n"
       << "        Yv: -0.13\n"
       << "        Yvv: -0.18\n"
       << "        Yvvv: 0\n"
       << "        Yvrr: 0\n"
       << "        Yr: 0.015\n"
       << "        Yrr: 0.021\n"
       << "        Yrrr: 0\n"
       << "        Yrvv: 0\n"
       << "        Nv: -0.37\n"
       << "        Nvv: -0.12\n"
       << "        Nvvv: 0\n"
       << "        Nvrr: 0\n"
       << "        Nr: -0.1\n"
       << "        Nrr: 0.005\n"
       << "        Nrrr: 0\n"
       << "        Nrvv: 0\n"
       << "      - name: PropRudd\n"
       << "        model: propeller+rudder\n"
       << "        position of propeller frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: -8.4, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 2.5, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: 3, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        wake coefficient w: 0\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0\n"
       << "        rotation: clockwise\n"
       << "        number of blades: 4\n"
       << "        blade area ratio AE/A0: 0.55\n"
       << "        diameter: {value: 1.925, unit: m}\n"
       << "        rudder area: {value: 2.2, unit: m^2}\n"
       << "        rudder height: {value: 2, unit: m^2}\n"
       << "        effective aspect ratio factor: 1.7\n"
       << "        lift tuning coefficient: 2.1\n"
       << "        drag tuning coefficient: 1\n"
       << "        position of rudder in body frame:\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "\n"
       << "output:\n"
       << "   - format: map\n"
       << "     filename: efforts.h5\n"
       << "     data: [t,  'Mz(PropRudd,Anthineas,Anthineas)', 'Fx(Fman,Anthineas,Anthineas)']\n";
    return ss.str();
}

std::string test_data::maneuvering_with_commands()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -0.099, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: -.334, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 10, unit: kt}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 0, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [3.519e4,0,0,0,0,0]\n"
       << "            row 2: [0,3.023e5,0,0,0,0]\n"
       << "            row 3: [0,0,1.980e5,0,0,0]\n"
       << "            row 4: [0,0,0,3.189e5,0,0]\n"
       << "            row 5: [0,0,0,0,8.866e6,0]\n"
       << "            row 6: [0,0,0,0,0,6.676e6]\n"
       << "    controlled forces:\n"
       << "      - model: maneuvering\n"
       << "        name: F1\n"
       << "        reference frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "            phi: {value: 1.418, unit: deg}\n"
       << "            theta: {value: 1.418, unit: deg}\n"
       << "            psi: {value: 1.418, unit: deg}\n"
       << "        X: PropRudd(rpm)\n"
       << "        Y: 1\n"
       << "        Z: 2\n"
       << "        K: 3\n"
       << "        M: 4\n"
       << "        N: 5\n"
       << "      - name: PropRudd\n"
       << "        model: propeller+rudder\n"
       << "        position of propeller frame:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: -8.4, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 2.5, unit: m}\n"
       << "            phi: {value: 0, unit: rad}\n"
       << "            theta: {value: 3, unit: deg}\n"
       << "            psi: {value: 0, unit: deg}\n"
       << "        wake coefficient w: 0\n"
       << "        relative rotative efficiency etaR: 1\n"
       << "        thrust deduction factor t: 0\n"
       << "        rotation: clockwise\n"
       << "        number of blades: 4\n"
       << "        blade area ratio AE/A0: 0.55\n"
       << "        diameter: {value: 1.925, unit: m}\n"
       << "        rudder area: {value: 2.2, unit: m^2}\n"
       << "        rudder height: {value: 2, unit: m^2}\n"
       << "        effective aspect ratio factor: 1.7\n"
       << "        lift tuning coefficient: 2.1\n"
       << "        drag tuning coefficient: 1\n"
       << "        position of rudder in body frame:\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "\n"
       << "output:\n"
       << "   - format: map\n"
       << "     filename: efforts.h5\n"
       << "     data: [t,  'Fx(F1,Anthineas,Anthineas)',  'Fy(F1,Anthineas,Anthineas)',  'Fz(F1,Anthineas,Anthineas)']\n";
    return ss.str();
}

std::string test_data::kt_kq()
{
    std::stringstream ss;
    ss << "name: port side propeller\n"
       << "model: Kt(J) & Kq(J)\n"
       << "position of propeller frame:\n"
       << "    frame: mesh(body 1)\n"
       << "    x: {value: -4, unit: m}\n"
       << "    y: {value: -2, unit: m}\n"
       << "    z: {value: 2, unit: m}\n"
       << "    phi: {value: 0, unit: rad}\n"
       << "    theta: {value: -10, unit: deg}\n"
       << "    psi: {value: -1, unit: deg}\n"
       << "wake coefficient w: 0.9\n"
       << "relative rotative efficiency etaR: 1\n"
       << "thrust deduction factor t: 0.7\n"
       << "rotation: clockwise\n"
       << "diameter: {value: 2, unit: m}\n"
       << "J: [-1.00000E+00,-8.00000E-01,-5.00000E-01,-2.50000E-01,-1.00000E-03,1.00000E-03, 2.00000E-01, 4.00000E-01, 6.00000E-01, 7.00000E-01, 8.00000E-01,1.00000E+00]\n"
       << "Kt: [-4.50000E-01,-2.50000E-01,-1.90000E-01,-2.00000E-01,-2.00000E-01,3.25000E-01, 2.80000E-01, 2.33000E-01, 1.85000E-01, 1.62000E-01,1.36000E-01,8.50000E-02]\n"
       << "Kq: [-4.80000E-02,-3.30000E-02,-2.20000E-02,-2.50000E-02,-2.80000E-02,3.40000E-02, 3.26000E-02, 2.97000E-02, 2.55000E-02, 2.30000E-02, 2.040000E-02,1.50000E-02]\n";
    return ss.str();
}

std::string test_data::linear_hydrostatics()
{
    std::stringstream ss;
    ss << "model: linear hydrostatics\n"
       << "z eq: {value: -2, unit: m}\n"
       << "theta eq: {value: 1, unit: deg}\n"
       << "phi eq: {value: -3, unit: deg}\n"
       << "K row 1: [1, 0 , 0]\n"
       << "K row 2: [0, 1 , 0]\n"
       << "K row 3: [0, 0 , 1]\n"
       << "x1: {value: 10, unit: m}\n"
       << "y1: {value: -10, unit: m}\n"
       << "x2: {value: 10, unit: m}\n"
       << "y2: {value: 10, unit: m}\n"
       << "x3: {value: -10, unit: m}\n"
       << "y3: {value: -10, unit: m}\n"
       << "x4: {value: -10, unit: m}\n"
       << "y4: {value: 10, unit: m}\n";
    return ss.str();
}

std::string test_data::anthineas_linear_hydrostatics_without_waves()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: no waves\n"
       << "    constant sea elevation in NED frame: {value: 0, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 1, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: 0, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: kt}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 1, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: linear hydrostatics\n"
       << "        z eq: {value: -0.099, unit: m}\n"
       << "        theta eq: {value: 0, unit: deg}\n"
       << "        phi eq: {value: 0, unit: deg}\n"
       << "        K row 1: [100002.8, 0 , 0]\n"
       << "        K row 2: [0, 1E6 , 0]\n"
       << "        K row 3: [0, 0 , 1E6]\n"
       << "        x1: {value: 10, unit: m}\n"
       << "        y1: {value: -10, unit: m}\n"
       << "        x2: {value: 10, unit: m}\n"
       << "        y2: {value: 10, unit: m}\n"
       << "        x3: {value: -10, unit: m}\n"
       << "        y3: {value: -10, unit: m}\n"
       << "        x4: {value: -10, unit: m}\n"
       << "        y4: {value: 10, unit: m}\n";
    return ss.str();
}

std::string test_data::anthineas_linear_hydrostatics_with_waves()
{
    std::stringstream ss;
    ss << "rotations convention: [psi, theta', phi'']\n"
       << "\n"
       << "environmental constants:\n"
       << "    g: {value: 9.81, unit: m/s^2}\n"
       << "    rho: {value: 1025, unit: kg/m^3}\n"
       << "    nu: {value: 1.18e-6, unit: m^2/s}\n"
       << "environment models:\n"
       << "  - model: waves\n"
       << "    discretization:\n"
       << "       n: 128\n"
       << "       omega min: {value: 0.1, unit: rad/s}\n"
       << "       omega max: {value: 6, unit: rad/s}\n"
       << "       energy fraction: 0.999\n"
       << "    spectra:\n"
       << "      - model: airy\n"
       << "        depth: {value: 100, unit: m}\n"
       << "        seed of the random data generator: 0\n"
       << "        directional spreading:\n"
       << "           type: dirac\n"
       << "           waves propagating to: {value: 0, unit: deg}\n"
       << "        spectral density:\n"
       << "           type: dirac\n"
       << "           omega0: {value: 2.482701, unit: rad/s}\n"
       << "           Hs: {value: 15, unit: m}\n"
       << "    \n"
       << "# Fixed frame: NED\n"
       << "bodies: # All bodies have NED as parent frame\n"
       << "  - name: Anthineas\n"
       << "    mesh: anthineas.stl\n"
       << "    position of body frame relative to mesh:\n"
       << "        frame: mesh\n"
       << "        x: {value: 9.355, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: -3.21, unit: m}\n"
       << "        phi: {value: 0, unit: rad}\n"
       << "        theta: {value: 0, unit: rad}\n"
       << "        psi: {value: 0, unit: rad}\n"
       << "    initial position of body frame relative to NED:\n"
       << "        frame: NED\n"
       << "        x: {value: 0, unit: m}\n"
       << "        y: {value: 0, unit: m}\n"
       << "        z: {value: 1, unit: m}\n"
       << "        phi: {value: 0, unit: deg}\n"
       << "        theta: {value: 0, unit: deg}\n"
       << "        psi: {value: 0, unit: deg}\n"
       << "    initial velocity of body frame relative to NED:\n"
       << "        frame: Anthineas\n"
       << "        u: {value: 0, unit: kt}\n"
       << "        v: {value: 0, unit: m/s}\n"
       << "        w: {value: 1, unit: m/s}\n"
       << "        p: {value: 0, unit: rad/s}\n"
       << "        q: {value: 0, unit: rad/s}\n"
       << "        r: {value: 0, unit: rad/s}\n"
       << "    dynamics:\n"
       << "        hydrodynamic forces calculation point in body frame:\n"
       << "            x: {value: 0.696, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 1.418, unit: m}\n"
       << "        centre of inertia:\n"
       << "            frame: Anthineas\n"
       << "            x: {value: 0.258, unit: m}\n"
       << "            y: {value: 0, unit: m}\n"
       << "            z: {value: 0.432, unit: m}\n"
       << "        mass: {value: 253.31, unit: tonne} # Caution: 'ton' is the british ton which is 907.185 kg\n"
       << "        rigid body inertia matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [253310,0,0,0,0,0]\n"
       << "            row 2: [0,253310,0,0,0,0]\n"
       << "            row 3: [0,0,253310,0,0,0]\n"
       << "            row 4: [0,0,0,1.522e6,0,0]\n"
       << "            row 5: [0,0,0,0,8.279e6,0]\n"
       << "            row 6: [0,0,0,0,0,7.676e6]\n"
       << "        added mass matrix at the center of buoyancy projected in the body frame:\n"
       << "            frame: Anthineas\n"
       << "            row 1: [0,0,0,0,0,0]\n"
       << "            row 2: [0,0,0,0,0,0]\n"
       << "            row 3: [0,0,0,0,0,0]\n"
       << "            row 4: [0,0,0,0,0,0]\n"
       << "            row 5: [0,0,0,0,0,0]\n"
       << "            row 6: [0,0,0,0,0,0]\n"
       << "    external forces:\n"
       << "      - model: linear hydrostatics\n"
       << "        z eq: {value: -0.099, unit: m}\n"
       << "        theta eq: {value: 0, unit: deg}\n"
       << "        phi eq: {value: 0, unit: deg}\n"
       << "        K row 1: [100002.8, 0 , 0]\n"
       << "        K row 2: [0, 1E6 , 0]\n"
       << "        K row 3: [0, 0 , 1E6]\n"
       << "        x1: {value: 10, unit: m}\n"
       << "        y1: {value: -10, unit: m}\n"
       << "        x2: {value: 10, unit: m}\n"
       << "        y2: {value: 10, unit: m}\n"
       << "        x3: {value: -10, unit: m}\n"
       << "        y3: {value: -10, unit: m}\n"
       << "        x4: {value: -10, unit: m}\n"
       << "        y4: {value: 10, unit: m}\n";
    return ss.str();
}
