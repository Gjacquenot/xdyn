stages:
  - git_submodule
  - lint
  - cleanup_Docker
  - build

git_submodule:
   stage: git_submodule
   script:
     - git submodule sync --recursive
     - git submodule update --init --recursive

lint:
   stage: lint
   script:
     - cd code &&
       if grep --recursive --include={*.cpp,*.c,*.hpp,*.h,*.md,*.yml,*.cmake.*.xml,*.html,*.in,*.txt}
               --exclude-dir={eigen,eigen3-hdf5,gcovr,gtest,gmock,google-test,yaml-cpp} -P "\t" . ;
       then echo "Tabs found in the lines shown above."; false;
       else echo "Repo passed no-tabs check."; fi &&
       cd ..



cleanup_Docker:
   stage: cleanup_Docker
   script:
     - docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null || true
     - docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null || true

build:
   stage: build
   script:
     - cd ssc_getter
     - docker build -f Dockerfile -t get_ssc .
     - docker run -i --rm -v /etc/group:/etc/group:ro  -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/out --net=host -w /out get_ssc python3 fetch_ssc.py
     - unzip artifacts.zip
     - rm artifacts.zip
     - mv ssc.deb ..
     - cd ..
     - mkdir -p build
     - docker build -f Dockerfile -t build-xdyn .
     - docker run --rm -v /etc/group:/etc/group:ro  -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd)/build:/build -w /build -v $(pwd):/opt/share -i build-xdyn cmake -Wno-dev -G Ninja -DINSTALL_PREFIX:PATH=/opt/xdyn -Dssc_DIR:PATH=/opt/ssc/lib/ssc/cmake -DHDF5_DIR:PATH=/usr/local/hdf5 -DBOOST_ROOT:PATH=/usr/local/boost_1_60_0 /opt/share/code      
     - docker run --rm -v /etc/group:/etc/group:ro  -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd)/build:/build -w /build -v $(pwd):/opt/share -i build-xdyn ninja package
     - docker run --rm -v /etc/group:/etc/group:ro  -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd)/build:/build -w /build -v $(pwd):/opt/share -i build-xdyn ./run_all_tests --gtest_output=xml:run_all_tests.xml
     - cd spt_getter
     - docker build -f Dockerfile -t get_spt .
     - docker run -i --rm -v /etc/group:/etc/group:ro  -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/out --net=host -w /out --net=host get_spt python fetch_spt.py
     - rm -rf html spt-0.0.0-py2.py3-none-any.whl
     - unzip artifacts.zip
     - rm artifacts.zip
     - rm -rf html
     - mv spt-0.0.0-py2.py3-none-any.whl ../make_docker_image
     - cd ..
      - ls
      - mv code/build/xdyn.deb make_docker_image
      - cd make_docker_image
      - ./make_docker_image.sh
      - cd ..
   artifacts:
      paths:
      - make_docker_image/xdyn.tar.gz
      - build/xdyn.deb

