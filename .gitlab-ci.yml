stages:
  - git_submodule
  - lint
  - cleanup_Docker
  - build

git_submodule:
   stage: git_submodule
   script:
     - git submodule sync --recursive
     - git submodule update --init --recursive

lint:
   stage: lint
   script:
     - cd code &&
       if grep --recursive --include={*.cpp,*.c,*.hpp,*.h,*.md,*.yml,*.cmake.*.xml,*.html,*.in,*.txt}
               --exclude-dir={eigen,eigen3-hdf5,gcovr,gtest,gmock,google-test,yaml-cpp} -P "\t" . ;
       then echo "Tabs found in the lines shown above."; false;
       else echo "Repo passed no-tabs check."; fi &&
       cd ..

cleanup_Docker:
   stage: cleanup_Docker
   script:
     - docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null || true
     - docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null || true

build:windows:
   stage: build
   script:
     - cd ssc_getter
     - docker build -f Dockerfile -t get_ssc .
     - docker run -i --rm -v /etc/group:/etc/group:ro -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/out --net=host -w /out get_ssc python3 fetch_ssc.py
     - unzip artifacts.zip
     - rm artifacts.zip
     - unzip ssc.zip -d /opt/ssc
     - rm ssc.zip
     - cd ..
     - mkdir -p build
     - docker run --rm -v /etc/group:/etc/group:ro  -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/opt/share -w /opt/share mydockcross/windows-x64
          /bin/bash -c "mkdir /opt/share/.wine &&
                        export WINEPREFIX=/opt/share/.wine &&
                        wine winecfg &&
                        cmake -Wno-dev
                        -G Ninja
                        -Dssc_DIR:PATH=/opt/ssc/lib/ssc/cmake
                        -DCMAKE_INSTALL_PREFIX:PATH=/opt/xdyn
                        -DCPACK_GENERATOR=ZIP
                        -DBOOST_ROOT:PATH=/opt/boost
                        -DBOOST_INCLUDEDIR:PATH=/opt/boost/include
                        -DBoost_INCLUDE_DIR:PATH=/opt/boost/include
                        -DBOOST_LIBRARYDIR:PATH=/opt/boost/lib
                        -DBoost_NO_SYSTEM_PATHS:BOOL=OFF
                        -DBoost_LIBRARY_DIR_RELEASE:PATH=/opt/boost/lib
                        -DBoost_DEBUG=1
                        /opt/share/code"
     - docker run --rm -v /etc/group:/etc/group:ro  -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/opt/share -w /opt/share mydockcross/windows-x64
          /bin/bash -c "mkdir -p /opt/share/.wine && export WINEPREFIX=/opt/share/.wine && wine winecfg && ninja package"
     - docker run --rm -v /etc/group:/etc/group:ro  -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/opt/share -w /opt/share mydockcross/windows-x64
          /bin/bash -c "mkdir -p /opt/share/.wine && export WINEPREFIX=/opt/share/.wine && wine winecfg && wine ./run_all_tests --gtest_filter=*"


build:debian:
   stage: build
   script:
     - cd ssc_getter
     - make
     - mv ssc.deb ..
     - cd ..
     - mkdir -p build
     - docker build -f Dockerfile -t build-xdyn --build-arg CACHEBUST=$(date +%s) .
     - docker run --rm -v /etc/group:/etc/group:ro -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd)/build:/build -w /build -v $(pwd):/opt/share -i build-xdyn cmake -Wno-dev -G Ninja -DINSTALL_PREFIX:PATH=/opt/xdyn -Dssc_DIR:PATH=/opt/ssc/lib/ssc/cmake -DHDF5_DIR:PATH=/usr/local/hdf5 -DBOOST_ROOT:PATH=/usr/local/boost_1_60_0 -DProtobuf_LIBRARY=/usr/local/lib/libprotobuf.a /opt/share/code
     - docker run --rm -v /etc/group:/etc/group:ro -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd)/build:/build -w /build -v $(pwd):/opt/share -i build-xdyn /bin/sh -c "cd /opt/share/doc_user/images && make -i > /dev/null 2> /dev/null && cd /build && ninja package"
     - docker run --rm -v /etc/group:/etc/group:ro -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd)/build:/build -w /build -v $(pwd):/opt/share -i build-xdyn ./run_all_tests --gtest_output=xml:run_all_tests.xml
     - cd spt_getter
     - docker build -f Dockerfile -t get_spt .
     - docker run -i --rm -v /etc/group:/etc/group:ro  -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER ) -v $(pwd):/out --net=host -w /out --net=host get_spt python fetch_spt.py -c 44828c3a961044794426d0f4a56bd46600a13897

     - rm -rf html spt-0.0.0-py2.py3-none-any.whl
     - unzip artifacts.zip
     - rm artifacts.zip
     - rm -rf html
     - mv spt-0.0.0-py2.py3-none-any.whl ../make_docker_image
     - cd ..
     - cp build/xdyn.deb make_docker_image
     - cd make_docker_image
     - ./make_docker_image.sh

